Top := Exp ";;"      {PK_top}
  | LetSeq ";;"       {PK_top}
  | DefRec ";;"      {PK_top},

LetSeq := "let" LetAnd   {PK_null}
  | LetSeq "let" LetAnd  {PK_null},

LetAnd := DefV        {PK_null}
  | DefV "and" LetAnd {PK_letand},

DefV := Id "=" Exp    {PK_defv}
  | Id Args "=" Exp   {PK_defv},

DefRec := "let" "rec" Id Args "=" Exp {PK_defrec},

Exp := If           {PK_null}
  | Let             {PK_null}
  | Rec             {PK_null}
  | Fun             {PK_null}
  | Or              {PK_null}
  | Match           {PK_null},

If := "if" Exp "then" Exp "else" Exp {PK_if},

Match := "match" Exp "with" "[" "]" "->" Exp "|" Id "::" Id "->" Exp {PK_match}, 

Let := "let" Id "=" Exp "in" Exp {PK_let}
  | "let" Id Args "=" Exp "in" Exp {PK_let},

Rec := "let" "rec" Id Args "=" Exp "in" Exp {PK_rec},

Fun := "fun" Args "->" Exp {PK_fun},

Or := And             {PK_null}
  | Or "||" And       {PK_or},

And := Comp            {PK_null}
  | And "&&" Comp      {PK_and},

Comp := Add           {PK_null}
  | "-" Add           {PK_unary}
  | Comp "=" Add       {PK_eq}
  | Comp "<>" Add      {PK_neq}
  | Add ">" Add       {PK_large}
  | Add "<" Add       {PK_small},

Add := Mul            {PK_null}
  | Add "+" Mul       {PK_add}
  | Add "-" Mul       {PK_sub},

Mul := Cons            {PK_null}
  | Mul "*" Cons       {PK_mul}
  | Mul "/" Cons       {PK_div},

Cons := Apply           {PK_null}
  | "not" Apply         {PK_not}
  | Apply "::" Cons     {PK_cons},

Apply := Prim           {PK_null}
  | Apply Prim          {PK_app},

Args := Id            {PK_args}
  | Id Args           {PK_args},

List := Exp           {PK_null}
  | Exp ";" List      {PK_null},
  
Prim := "(" Exp ")"   {PK_null}
  | Int               {PK_lit}
  | "true"            {PK_lit}
  | "false"           {PK_lit}
  | Id                {PK_null}
  | LBr List "]"      {PK_list}
  | "[" "]"           {PK_empty},

LBr := "["            {PK_seq},

Id := Ident           {PK_lit}